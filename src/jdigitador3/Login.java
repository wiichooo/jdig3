/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jdigitador3;

import Conexion.DBClient;
import Conexion.FtpClient;
import Conexion.SFTPClient;
import Conexion.mongoDB;
import com.jcraft.jsch.JSchException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JFrame;

public class Login extends javax.swing.JDialog {

    /**
     * Creates new form Login
     */
    //Diccionario a utilizar!
    String Diccionario = "";
    String StrDic = "";
    long id;
    String idLog;
    String username;
    String nombre;
    String apellido;
    int grupo;
    boolean ingreso;
    int Grupo_Digitadores = Variables.Grupo_Digitadores;
    Propiedades rc = new Propiedades(new javax.swing.JFrame(), true);
    Inicio dialog = null;
    public static boolean esFTP = false;
    
    public Login(java.awt.Frame parent, boolean modal) throws UnknownHostException {
        super(parent, modal);
        initComponents();
        this.getRootPane().setDefaultButton(jButton2);
        String computername=InetAddress.getLocalHost().getHostName();
        jLabel4.setText(computername);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtusuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        mensaje_jLabel = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtpass = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Iniciar Sesión");
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Usuario");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/48/User 7.png"))); // NOI18N

        jLabel3.setText("Contraseña");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/Symbol Check.png"))); // NOI18N
        jButton2.setText("Aceptar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/Symbol Restricted.png"))); // NOI18N
        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/Symbol Configuration.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mensaje_jLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel3))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtusuario, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                                            .addComponent(txtpass))))))
                        .addGap(0, 31, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtusuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mensaje_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Verificaciones();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
               System.exit(0); //se sale de la aplicacion
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(txtusuario.getText().equals("admin") && String.valueOf(txtpass.getPassword()).equals("admin123")){
            rc = new Propiedades(new javax.swing.JFrame(), true);
            rc.setLocationRelativeTo(null);
            rc.setVisible(true);
        }     
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
           System.exit(0); //se sale de la aplicacion
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel mensaje_jLabel;
    private javax.swing.JPasswordField txtpass;
    private javax.swing.JTextField txtusuario;
    // End of variables declaration//GEN-END:variables

    private int mensaje(String mensaje, int a) {
        Mensajes msj = new Mensajes();
        int b = -1;
        if(a == 0) {
            msj.error(mensaje, "Error");
        }
        else {
            b = msj.advertencia(mensaje, "Error");
        }
        return b;
    }
    
    private void Verificaciones() {
        ingreso = true;
        rc = new Propiedades(new javax.swing.JFrame(), true);
        rc.setVisible(false);
        
        File folderCSPRO = new File(rc.getpathCSpro());
        File runpff = new File(rc.getpathCSpro()+"\\runpff.exe");
        
        File folderArchivos = new File(rc.getUbicacionArchivos());
        File folderXML = new File(rc.getDirXML());
        File folderOtros = new File(rc.getDirOtros());
        
        if(!folderCSPRO.exists() || !folderCSPRO.isDirectory()){
            mensaje("¡Directorio CSPRO no existe!",0); ingreso = false;
        }
        if(!runpff.exists() || !runpff.isFile()){
            mensaje("¡Archivo runpff no se encuentra en la carpeta de CSPRO!",0); ingreso = false;
        }
        if(!folderArchivos.exists() || !folderArchivos.isDirectory()){
            int a = mensaje("¡Directorios locales de archivos no existen!\n ¿Desea crearlos?",1);
            if(a == 0){
                folderArchivos.mkdirs();
                 File folder1raD = new File(rc.getUbicacionArchivos() + "//" + Variables.Primera_Digitacion);
                 File folder2raD = new File(rc.getUbicacionArchivos() + "//" + Variables.Segunda_Digitacion);
                 File folderVer = new File(rc.getUbicacionArchivos() + "//" + Variables.Verificacion);
                 File folderTmp = new File(rc.getUbicacionArchivos() + "//" + Variables.Diccionario);
                 folder1raD.mkdirs();
                 folder2raD.mkdirs();
                 folderVer.mkdirs();
                 folderTmp.mkdirs();
            }
            else {
                ingreso = false;
            }
        }else{
                 File folder1raD = new File(rc.getUbicacionArchivos() + "//" + Variables.Primera_Digitacion);
                 File folder2raD = new File(rc.getUbicacionArchivos() + "//" + Variables.Segunda_Digitacion);
                 File folderVer = new File(rc.getUbicacionArchivos() + "//" + Variables.Verificacion);
                 File folderTemp = new File(rc.getUbicacionArchivos() + "//" + Variables.Diccionario);
                 if(!folder1raD.exists() || !folder1raD.isDirectory())
                     folder1raD.mkdirs();
                 if(!folder2raD.exists() || !folder2raD.isDirectory())
                     folder2raD.mkdirs();
                 if(!folderVer.exists() || !folderVer.isDirectory())
                     folderVer.mkdirs();
                 if(!folderTemp.exists() || !folderTemp.isDirectory())
                     folderTemp.mkdirs();
        }

         if(ingreso){
                //Verifica archivo xml
            if(!folderXML.exists() || !folderXML.isFile()){
                ingreso = false;
                int a = mensaje("¡El xml del Diccionario no existe!",0);
            }

        //Verifica archivo Otros
            if(!folderOtros.exists() || !folderOtros.isFile()){
                ingreso = false;
                int a = mensaje("¡El xml del Otros no existe!",0);
            }

            //Verificar conexion con el servidor ftp
            if(esFTP){
                FtpClient ftp = new FtpClient();
                boolean ftpcon = ftp.conexion(rc.getDireccionSA(), rc.getUsuarioSA(), rc.getPassSA(),22);
                if(!ftpcon) {
                    mensaje("¡No se puede conectar con el servidor ftp!", 0);
                    ingreso = false;
                }else {
                    ftp.disconnect();
                }
            }else{
                try {
                    SFTPClient ftp = new SFTPClient();
                    boolean ftpcon = ftp.conexion(rc.getDireccionSA(), rc.getUsuarioSA(), rc.getPassSA(),22);
                    if(ftpcon) {              
    //                    msj.info("¡Conexion correcta con el servidor ftp!", "Información");
                        ftp.disconnect();
                    }else{
                        mensaje("¡No se puede conectar con el servidor sftp!", 0);
                        ingreso = false;
                    }
                } catch (JSchException ex) {
                    mensaje("¡No se puede conectar con el servidor sftp!", 0);
                    ingreso = false;
        //            Logger.getLogger(Propiedades.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
////////            try{
////////                mongoDB mongo = new mongoDB();
////////                if(!mongo.mongoDB(rc.getDireccionBDMongo(), rc.getNombreBDMongo(), 
////////                        rc.getUsuarioBDMongo(), rc.getPassBDMongo())){
////////                    ingreso = false;
////////                    mensaje("¡No se puede conectar con el servidor de MongoDB!", 0);
////////                }
////////            }catch(Exception e){
////////                    ingreso = false;
////////                    mensaje("¡No se puede conectar con el servidor de MongoDB!", 0);
////////            }
            //segunda opcion     
        }
         
        //Verificar conexion con la base de datos
          DBClient con = null;
          Connection c = null;
          try {
              con = new DBClient();
              c = con.getConnection(rc.getDireccionBD(),rc.getNombreBD(),rc.getUsuarioBD(),rc.getPassBD()
                      ,rc.getPuertoBD());

          } catch (SQLException ex) {
              ingreso = false;
              mensaje("¡Error en la conexión con la base de datos!",0);
          }
        if(ingreso){
            if(!String.valueOf(txtpass.getPassword()).equals("") && !txtusuario.getText().equals("")){
            ResultSet rs ;
            rs = con.getUser(c,txtusuario.getText());
            
                try{

                    rs.next();
                    idLog = rs.getString("u.username");
                    id = rs.getLong("p.id");
                    apellido = rs.getString("p.apellido1");
                    nombre = rs.getString("p.nombre1");

                    String pass = rs.getString("u.password");
                    grupo = rs.getInt("u.tipo_usuario");
                    int login = rs.getInt("u.login");
                    username = rs.getString("u.username");

    //                System.out.println(pass);
                    if(!txtusuario.getText().trim().equals(username)){
                        ingreso = false;
                        mensaje("¡Usuario no existe en la base de datos!",0);
                    }else
                    if(login == 1){
                        mensaje("¡Esta usuario ya inicio sesión!",0);
                        ingreso = false;
                    }else if(!CheckSum.encrypt(String.valueOf(txtpass.getPassword()).trim(), pass,"SHA1")) {
                        mensaje("¡Contraseña incorrecta!",0);
                        ingreso = false;
                    }else if(grupo != Grupo_Digitadores){
                        mensaje("¡Usuario no pertenece al grupo correcto!",0);
                        ingreso = false;
                    }else if(!con.setUserLogin(c, idLog, grupo, 1)){
                        mensaje("¡No se logro iniciar sesión!",0);
                        ingreso = false;
                    } 
                   c.close(); 
                }catch(Exception e) {         
                    ingreso = false;
                    mensaje("¡Usuario no existe en la base de datos!",0);
                }
            }else{
                ingreso = false;
                mensaje("¡Debe ingresar su usuario y contraseña!",0);
            }
        }
 
        ingreso(ingreso);
//        return;
    }

    private void ingreso(boolean b) {
        if(b){          

                mensaje_jLabel.setText("Conectado");
                
//                try {
//                    c.escribir("Se ingreso a la aplicacion");
//                } catch (Exception ex) {
//                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
//                }
                this.dispose(); 
                Inicio dialog = null;
                dialog = new Inicio(this, rc);
                dialog.setLocationRelativeTo(null);
                dialog.setExtendedState(dialog.getExtendedState() | JFrame.MAXIMIZED_BOTH);
                        
        }
    }
 
    public static int calcularEdad(String fecha) {
    String datetext = fecha;
        try {
            Calendar birth = new GregorianCalendar();
            Calendar today = new GregorianCalendar();
            int age=0;
            int factor=0;
            Date birthDate=new SimpleDateFormat("dd-MM-yyyy").parse(datetext);
            Date currentDate=new Date(); //current date
            birth.setTime(birthDate);
            today.setTime(currentDate);
            if (today.get(Calendar.MONTH) >= birth.get(Calendar.MONTH)) {
                if (today.get(Calendar.MONTH) == birth.get(Calendar.MONTH)) {
                    if (today.get(Calendar.DATE) > birth.get(Calendar.DATE)) {
                    factor = -1;
                    }
                } else {
                factor = -1;
                }
            }
            age=(today.get(Calendar.YEAR)-birth.get(Calendar.YEAR))+factor;
            return age;
        } catch (ParseException e) {
            return -1;
        }
    }
    
    public String getUsuario(){
        return username;
    }
    public String getNombre(){
        return nombre;
    }
    public String getApellido(){
        return apellido;
    }
    public int getGrupo(){
        return grupo;
    }
    public long getID(){
        return id;
    }
    public String getIDLog(){
        return idLog;
    }
    public String getPathCSPRO(){
        return rc.getpathCSpro();
    }
    public String getPathArchivosLocales(){
        return rc.getUbicacionArchivos();
    }   
    public String getPathCuestionarios(){
        return rc.getDirXML(); 
    }
    public void setStrDic(String dicc){
        this.StrDic = dicc;
        ingreso(ingreso);
    }
    public String getStrDic(){
        return this.StrDic;
    }
}
